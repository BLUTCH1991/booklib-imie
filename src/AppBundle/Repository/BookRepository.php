<?php

namespace AppBundle\Repository;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends \Doctrine\ORM\EntityRepository
{

    public function findLast($limit)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('b', 'a')
            ->from('AppBundle:Book', 'b')
            ->innerJoin('b.author', 'a')
            ->orderBy('b.createdAt', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function getRandomBooks($bookId)
    {

        $sql = 'SELECT *
                FROM book
                INNER JOIN author
                ON book.author_id = author.id
                WHERE book.id != :notId
                ORDER BY rand()
                LIMIT 3 ;';

        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindParam(':notId', $bookId);
        $stmt->execute();
        return $stmt->fetchAll();

    }


//SELECT borrow.date_end, box.address, user.username
//FROM borrow
//INNER JOIN book ON borrow.book_id = book.id
//INNER JOIN user ON borrow.user_id = user.id
//INNER JOIN box ON borrow.box_to_id = box.id;

    public function getAddressOrUser()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('borrow.date_end, box.address, user.username')
            ->from('AppBundle:Borrow', 'bw')
            ->innerJoin('bw', 'book', 'bk', 'bw.book_id = bk.id')
            ->innerJoin('bw', 'user', 'u', 'bw.user_id = user.id')
            ->innerJoin('bw', 'box', 'bx', 'bw.box_to_id = bx.id')
            ->getQuery()
            ->getResult();
    }

    public function getLastBorrow($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb
            ->select('bw')
            ->from('AppBundle:Borrow', 'bw')
            ->innerJoin('bw.book', 'b')
            ->where($qb->expr()->eq('b.id', ':id'))
            ->orderBy('bw.dateStart', 'DESC')
            ->addOrderBy('bw.dateEnd', 'DESC')
            ->setParameter('id', $id)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }

}
